name: Photon Build and Deploy to ECR

on:
  push:
    branches:
      - master

env:
  ECR_REPOSITORY: photon
  IMAGE_TAG: ${{ github.sha }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: 055775428164.dkr.ecr.eu-west-2.amazonaws.com
  TIMESTAMP: ${{ format('YYYY-MM-DD HH:mm:ss') }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Login to Amazon ECR
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    # Build, tag, and push Docker image to Amazon ECR with retry mechanism
    - name: Build, tag, and push image to Amazon ECR
      run: |
        # Add retry mechanism for the build
        for i in 1 2 3; do
          echo "Build attempt $i of 3"
          if docker build \
            --build-arg PHOTON_VERSION=0.3.5 \
            --build-arg PHOTON_JAR_URL=https://github.com/komoot/photon/releases/download/0.3.5/photon-0.3.5.jar \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} .; then
            echo "Build successful!"
            break
          else
            if [ $i -eq 3 ]; then
              echo "Build failed after 3 attempts"
              exit 1
            fi
            echo "Build failed, retrying in 10 seconds..."
            sleep 10
          fi
        done

        # Add retry mechanism for the push
        for i in 1 2 3; do
          echo "Push attempt $i of 3"
          if docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}; then
            echo "Push successful!"
            break
          else
            if [ $i -eq 3 ]; then
              echo "Push failed after 3 attempts"
              exit 1
            fi
            echo "Push failed, retrying in 10 seconds..."
            sleep 10
          fi
        done

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Kubernetes Manifests
      uses: actions/checkout@v2
      with:
        repository: Polysurance/kubernetes
        token: ${{ secrets.GH_PAT }}
        ref: dev

    - name: Install kubectl
      run: |
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Update kubeconfig
      run: |
        aws eks --region eu-west-2 update-kubeconfig --name Polysurance-prod 
    
    - name: Test kubectl connection
      run: |
        kubectl cluster-info
        
    - name: Update Kubernetes Deployment Image
      run: |
        sed -i 's|\(.*dkr\.ecr\..*amazonaws\.com/photon:\).*|\1${{ env.IMAGE_TAG }}|' photon/new-deployment.yaml
    
    - name: Show modified deployment.yaml
      run: |
        cat photon/new-deployment.yaml
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f photon/new-deployment.yaml -n default

    - name: Verify Deployment
      run: |
        # Add timeout to rollout status check
        timeout 300s kubectl rollout status deployment/photon -n default || {
          echo "Deployment did not complete within 5 minutes"
          kubectl describe deployment photon -n default
          kubectl get pods -n default -l app=photon
          exit 1
        }
        
    - name: Notify Microsoft Teams on Success
      if: success()
      uses: dchourasia/ms-teams-notification@1.0
      with:
        github-token: ${{ github.token }}
        webhook-uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
        card-layout-exit: complete
        show-on-start: false
        show-on-exit: true
        timezone: "Europe/London"
        custom-facts: |
          - name: Timestamp
            value: ${{ env.TIMESTAMP }}
          - name: Message
            value: "✅ Photon deployment successful! New version: ${{ env.IMAGE_TAG }}"
          - name: Environment
            value: "Production"
      
    - name: Notify Microsoft Teams on Failure
      if: failure()
      uses: dchourasia/ms-teams-notification@1.0
      with:
        github-token: ${{ github.token }}
        webhook-uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
        card-layout-exit: complete
        show-on-start: false
        show-on-exit: true
        timezone: "Europe/London"
        custom-facts: |
          - name: Timestamp
            value: ${{ env.TIMESTAMP }}
          - name: Message
            value: "❌ Photon deployment failed! Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          - name: Environment
            value: "Production"